import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * Copyright Georgia Institute of Technology 2004-2005
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param width the width of the desired picture
   * @param height the height of the desired picture
   */
  public Picture(int width, int height)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }
  
  /**
   * Horizontal flip method
   * In this method, I've given you the basic structure of how things will look.  
   * There are a few incomplete assignments inside of the method.  
   * It is your job to figure out how to complete those assignments!
   * This method works almost like the horizontal mirroring method you saw in your text book (pg 135), 
   * but instead of mirroring on the middle of the image, we want to flip it all the way.
   * Hint: Why do we need tempColor in this case?  I encourage you to reflect on this question 
   * if you find your method not working the way it should!
   * 
   * Flips an image along its central vertical axis.
   * Does not take parameters.
   * Does not return anything.
   **/
  public void flipHorizontal()
  {
    Color tempColor = null;
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    
    int limit1 = this.getHeight();
    int limit2 = this.getWidth()/2;
    
    for(int y = 0; y < limit1; y++)
    {
      for(int x = 0; x < limit2; x++)
      {
        leftPixel = getPixel(x,y);
        tempColor = leftPixel.getColor();
        rightPixel = getPixel(this.getWidth()-1-x,y);
        leftPixel.setColor(rightPixel.getColor());
        rightPixel.setColor(tempColor);
      }
    }
  }
  
  /**
   * Vertical flip method
   * Flips an image about its center horizontal axis.
   * Does not take parameters.
   * Does not return anything. **/
  public void flipVertical()
  {
    Color tempColor = null;
    Pixel topPixel = null;
    Pixel bottomPixel = null;
    
    int limit1 = this.getWidth();
    int limit2 = this.getHeight()/2;
    
    for(int x = 0; x < limit1; x++)
    {
      for(int y = 0; y < limit2; y++)
      {
        topPixel = getPixel(x,y);
        tempColor = topPixel.getColor();
        bottomPixel = getPixel(x,this.getHeight()-1-y);
        topPixel.setColor(bottomPixel.getColor());
        bottomPixel.setColor(tempColor);
      }
    }
  }
  
  /**
   * Grayscale method: gets the average values of red, green, and blue of each pixel and sets red, green,
   *     and blue to that average to make gray.
   * Does not take parameters.
   * Does not return anything.
   **/
  public void grayscale()
  {
    Pixel pixel = null;
    int intensity = 0;
    for( int y =0; y < this.getHeight(); y++)
    {
      for (int x = 0; x < this.getWidth(); x++)
      {
        pixel = getPixel(x,y);
        intensity = (int)((pixel.getRed()+pixel.getGreen()+pixel.getBlue())/3);
        pixel.setColor(new Color(intensity, intensity, intensity));
      }
    }
  }
  
  /**The collage method
    * This method will create the collage of your modified pictures.  
    * Hint 1: Inside of the for loop here will be another 2 nested for loops, giving you a grand total of 
    * 3 nested for loops in this method
    * Hint 2: If you're clever about the way you decide to draw your pixels onto the canvas, you may only 
    * have to write ONE LINE OF CODE inside the inner-most for loop to achieve the desired collage effect!
    * However, more than one line inside of the nested for loops is perfectly fine, of course! 
    * 
    * Parameters: The picture array of modified pictures.
    * Does not return anything.
    **/
  public void collage(Picture [] pictures)
  {
    Pixel sourcePixel = null;
    Pixel targetPixel = null;
    for(int index = 0; index < pictures.length; index++)
    {
      for (int sourceY = 0, targetY =0; sourceY < this.getHeight(); sourceY++, targetY++)
      {
        for(int sourceX = 0, targetX = index * this.getWidth()/3; sourceX < pictures[index].getWidth(); 
            sourceX++, targetX++)
        {
          sourcePixel = pictures[index].getPixel(sourceX,sourceY);
          targetPixel = this.getPixel(targetX, targetY);
          targetPixel.setColor(sourcePixel.getColor());
        }
      }
    }
  }
  
  /**flipVerticalSquareMethod
    * Method flips a square portion of an image along its center horizontal axis. The flipped portion is defined 
    *     at its bottom left corner by (x,y) and its sides have a length defined by the variable length
    * Does not return anything. **/
  public void flipVerticalSquare(int x, int y, int length)
  {
    Color tempColor = null;
    Pixel topPixel = null;
    Pixel bottomPixel = null;
    
    int limit1 = x + length;
    int limit2 = y - (length/2);
    
    for(int xFlip = x; xFlip < limit1; xFlip++)
    {
      for(int yFlip = y; yFlip > limit2; yFlip--)
      {
        topPixel = this.getPixel(xFlip,y-length + (y-yFlip));
        tempColor = topPixel.getColor();
        bottomPixel = this.getPixel(xFlip,yFlip);
        topPixel.setColor(bottomPixel.getColor());
        bottomPixel.setColor(tempColor); 
      }
    }
  }
  
  /** flipHorizontalSquare method
    * Method flips a square portion of an image along its center vertical axis. The flipped portion is 
    *     defined at its bottom left corner by (x,y) and its sides have a length defined by the variable length.
    * Does not return anything **/
  public void flipHorizontalSquare(int x, int y, int length)
  {
    Color tempColor = null;
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    
    int limit1 = y;
    int limit2 = x+(length/2);
    
    for(int yFlip = y-length; yFlip < limit1; yFlip++)
    {
      for(int xFlip = x; xFlip < limit2; xFlip++)
      {
        leftPixel = this.getPixel(xFlip,yFlip);
        tempColor = leftPixel.getColor();
        rightPixel = this.getPixel(x+length-(xFlip-x),yFlip);
        leftPixel.setColor(rightPixel.getColor());
        rightPixel.setColor(tempColor);
      }
    }
  }
} 
